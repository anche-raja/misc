Step-by-Step Guide
Step 1: Prepare Your Lambda Function Code
Ensure your Lambda function code is organized in a project directory. For example:

csharp
Copy code
my-lambda-app/
│
├── Dockerfile
├── app.py
├── event.json
Sample app.py:

python
Copy code
import json

def lambda_handler(event, context):
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
Sample event.json:

json
Copy code
{
  "key1": "value1",
  "key2": "value2",
  "key3": "value3"
}
Step 2: Create a Dockerfile
Create a Dockerfile in the project directory to define the container for your Lambda function.

Dockerfile:

dockerfile
Copy code
# Use the official AWS Lambda Python 3.8 base image
FROM public.ecr.aws/lambda/python:3.8

# Copy the function code into the container
COPY app.py ${LAMBDA_TASK_ROOT}

# Install the AWS Lambda Runtime Interface Emulator (RIE)
ADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie /usr/local/bin/aws-lambda-rie
RUN chmod +x /usr/local/bin/aws-lambda-rie

# Set the entrypoint to the RIE and specify the function handler
ENTRYPOINT ["/usr/local/bin/aws-lambda-rie", "python3", "-m", "awslambdaric"]
CMD ["app.lambda_handler"]
Step 3: Build the Docker Image
Open a terminal, navigate to your project directory, and build the Docker image.

sh
Copy code
docker build -t my-lambda-app .
Step 4: Run the Docker Container Locally
Run the Docker container and test your Lambda function locally. Use the --rm flag to remove the container after it exits, and the -v flag to mount the event file.

sh
Copy code
docker run -p 9000:8080 --rm -v ${PWD}/event.json:/var/task/event.json my-lambda-app
To invoke the Lambda function, use the curl command to send a request to the function running locally:

sh
Copy code
curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d @event.json
Step 5: Output and Logs
The output of your Lambda function will be displayed in the terminal, along with any logs generated by the function.

Summary
By using Docker and the AWS Lambda Runtime Interface Emulator (RIE), you can test your AWS Lambda functions locally without AWS SAM. This method involves:

Preparing your Lambda function code.
Creating a Dockerfile to define the Lambda execution environment.
Building the Docker image.
Running the Docker container locally and invoking the Lambda function using curl.
This setup allows you to simulate the Lambda runtime environment on your local machine, enabling local development and testing of your Lambda functions.
