const AWS = require('aws-sdk');
const s3 = new AWS.S3();
const unzipper = require('unzipper');
const mime = require('mime-types');

const EXCLUDE_EXTENSIONS = ['.woff', '.woff2', '.ttf', '.eot'];
const DEFAULT_CACHE_CONTROL = "max-age=31536000, public";

exports.handler = async (event) => {
  const sourceBucket = process.env.SOURCE_BUCKET;
  const sourceKey = process.env.SOURCE_KEY;
  const destBucket = process.env.DEST_BUCKET;

  // Get the zip file from S3 (KMS decryption handled automatically if IAM allows)
  const response = await s3.getObject({ Bucket: sourceBucket, Key: sourceKey }).promise();
  const zipBuffer = response.Body;

  // Open and parse the zip
  const directory = await unzipper.Open.buffer(zipBuffer);

  for (const file of directory.files) {
    const fileName = file.path;
    // Exclude directories and unwanted files
    if (file.type === 'Directory' || EXCLUDE_EXTENSIONS.some(ext => fileName.toLowerCase().endsWith(ext))) {
      continue;
    }

    const fileContent = await file.buffer();
    const contentType = guessContentType(fileName);

    await s3.putObject({
      Bucket: destBucket,
      Key: fileName,
      Body: fileContent,
      ContentType: contentType,
      CacheControl: DEFAULT_CACHE_CONTROL
      // If you had metadata originally, you'd add it here as 'Metadata' map.
    }).promise();
  }

  return { status: "done" };
};

function guessContentType(filename) {
  return mime.lookup(filename) || 'application/octet-stream';
}
________________________________________________________________________________________________________________________
provider "aws" {
  region = "us-east-1"
}

variable "source_bucket" {
  type    = string
  default = "my-encrypted-source-bucket"
}

variable "source_key" {
  type    = string
  default = "path/to/source.zip"
}

variable "destination_bucket" {
  type    = string
  default = "my-webstatic-bucket"
}

variable "kms_key_arn" {
  type = string
  # Provide the ARN of the KMS key used to encrypt source bucket objects
}

# Package Lambda code into a zip file
data "archive_file" "lambda_zip" {
  type        = "zip"
  source_file = "${path.module}/lambda_function.js"
  output_path = "${path.module}/lambda_function.zip"
}

resource "aws_iam_role" "lambda_role" {
  name = "lambda_s3_copy_role_nodejs"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": { "Service": "lambda.amazonaws.com" },
      "Effect": "Allow"
    }
  ]
}
EOF
}

resource "aws_iam_policy" "lambda_policy" {
  name        = "lambda_s3_copy_policy_nodejs"
  description = "Policy for Lambda to copy from source to destination S3"
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowS3ReadSource",
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::${var.source_bucket}/*"
    },
    {
      "Sid": "AllowS3WriteDestination",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::${var.destination_bucket}/*"
    },
    {
      "Sid": "AllowKMSDecrypt",
      "Effect": "Allow",
      "Action": [
        "kms:Decrypt"
      ],
      "Resource": "${var.kms_key_arn}"
    },
    {
      "Sid": "AllowLogs",
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "lambda_policy_attach" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

resource "aws_lambda_function" "s3_copy_lambda" {
  function_name    = "s3-zip-copy-lambda-nodejs"
  role             = aws_iam_role.lambda_role.arn
  handler          = "lambda_function.handler"
  runtime          = "nodejs18.x"
  filename         = data.archive_file.lambda_zip.output_path
  source_code_hash = filebase64sha256(data.archive_file.lambda_zip.output_path)

  environment {
    variables = {
      SOURCE_BUCKET  = var.source_bucket
      SOURCE_KEY     = var.source_key
      DEST_BUCKET    = var.destination_bucket
    }
  }
}

# Trigger the Lambda on upload of a zip file (optional)
resource "aws_s3_bucket_notification" "trigger_lambda" {
  bucket = var.source_bucket

  lambda_function {
    lambda_function_arn = aws_lambda_function.s3_copy_lambda.arn
    events              = ["s3:ObjectCreated:*"]
    filter_prefix       = "path/to/"
    filter_suffix       = ".zip"
  }

  depends_on = [aws_lambda_function.s3_copy_lambda, aws_iam_role_policy_attachment.lambda_policy_attach]
}

# IAM role for API Gateway to access the webstatic bucket
# If API Gateway is directly integrating with S3, it needs s3:GetObject permission.
resource "aws_iam_role" "apigw_role" {
  name = "apigw_s3_access_role"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "apigw_s3_policy" {
  role = aws_iam_role.apigw_role.id
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::${var.destination_bucket}/*"
    }
  ]
}
EOF
}

